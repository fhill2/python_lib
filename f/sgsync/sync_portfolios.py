import requests, re
README_URL = "https://raw.githubusercontent.com/Evavic44/portfolio-ideas/main/README.md"
req = requests.get(README_URL)

README_CONTENT = req.content.decode("utf-8").split("PORTFOLIO LINE END")[0].split("PORTFOLIO LINE START")[1]

from markdown_it import MarkdownIt
from mdformat.renderer import MDRenderer

mdit = MarkdownIt()
env = {}
tokens = mdit.parse(README_CONTENT)


gh_links = []
website_links = ["# THIS FILE IS AUTO GENERATED"]


def parse(token):
    if token.type == "inline":
        for c in token.children:
            if c.attrs != {} and c.type =="link_open":
                if "github.com" in c.attrs["href"]: 
                    gh_links.append(c.attrs["href"].lower().replace("https://github.com/", ""))
                else:
                    website_links.append(c.attrs["href"].lower())
        
for token in tokens:
    parse(token)


print("Writing github awesome portfolios...")
from f.frontmatter.frontmatter import write_file
note_filepath = "/home/f1/dev/notes/2/dev/portfolio/autogenerated-portfolios.md"
write_file(note_filepath, "\n".join(website_links))

from f.github import get_star_urls, star
stars = get_star_urls(True) # True for owner name only

# check if any repos in the github README table arent starred
print("Starring github awesome portfolios...")
for gh_link in gh_links:
    if gh_link not in stars:
        try:
            star(gh_link)
        except:
            continue

#
# from mistletoe import Document, HTMLRenderer
#
# # with open('foo.md', 'r') as fin:
#     with HTMLRenderer() as renderer:     # or: `with HTMLRenderer(AnotherToken1, AnotherToken2) as renderer:`
#         doc = Document(fin)              # parse the lines into AST
#         rendered = renderer.render(doc)  # render the AST
#         # internal lists of tokens to be parsed are automatically reset when exiting this `with` block
